// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bus/pb/bus_api_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockSWNBusClient is a mock of SWNBusClient interface.
type MockSWNBusClient struct {
	ctrl     *gomock.Controller
	recorder *MockSWNBusClientMockRecorder
}

// MockSWNBusClientMockRecorder is the mock recorder for MockSWNBusClient.
type MockSWNBusClientMockRecorder struct {
	mock *MockSWNBusClient
}

// NewMockSWNBusClient creates a new mock instance.
func NewMockSWNBusClient(ctrl *gomock.Controller) *MockSWNBusClient {
	mock := &MockSWNBusClient{ctrl: ctrl}
	mock.recorder = &MockSWNBusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSWNBusClient) EXPECT() *MockSWNBusClientMockRecorder {
	return m.recorder
}

// EventBidirect mocks base method.
func (m *MockSWNBusClient) EventBidirect(ctx context.Context, opts ...grpc.CallOption) (SWNBus_EventBidirectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EventBidirect", varargs...)
	ret0, _ := ret[0].(SWNBus_EventBidirectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventBidirect indicates an expected call of EventBidirect.
func (mr *MockSWNBusClientMockRecorder) EventBidirect(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventBidirect", reflect.TypeOf((*MockSWNBusClient)(nil).EventBidirect), varargs...)
}

// GetPeerInfo mocks base method.
func (m *MockSWNBusClient) GetPeerInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Peer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPeerInfo", varargs...)
	ret0, _ := ret[0].(*Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerInfo indicates an expected call of GetPeerInfo.
func (mr *MockSWNBusClientMockRecorder) GetPeerInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerInfo", reflect.TypeOf((*MockSWNBusClient)(nil).GetPeerInfo), varargs...)
}

// LocalDistributeEvents mocks base method.
func (m *MockSWNBusClient) LocalDistributeEvents(ctx context.Context, opts ...grpc.CallOption) (SWNBus_LocalDistributeEventsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalDistributeEvents", varargs...)
	ret0, _ := ret[0].(SWNBus_LocalDistributeEventsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalDistributeEvents indicates an expected call of LocalDistributeEvents.
func (mr *MockSWNBusClientMockRecorder) LocalDistributeEvents(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalDistributeEvents", reflect.TypeOf((*MockSWNBusClient)(nil).LocalDistributeEvents), varargs...)
}

// LocalFunnelEvents mocks base method.
func (m *MockSWNBusClient) LocalFunnelEvents(ctx context.Context, in *ListenEventsRequest, opts ...grpc.CallOption) (SWNBus_LocalFunnelEventsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LocalFunnelEvents", varargs...)
	ret0, _ := ret[0].(SWNBus_LocalFunnelEventsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalFunnelEvents indicates an expected call of LocalFunnelEvents.
func (mr *MockSWNBusClientMockRecorder) LocalFunnelEvents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalFunnelEvents", reflect.TypeOf((*MockSWNBusClient)(nil).LocalFunnelEvents), varargs...)
}

// MockSWNBus_EventBidirectClient is a mock of SWNBus_EventBidirectClient interface.
type MockSWNBus_EventBidirectClient struct {
	ctrl     *gomock.Controller
	recorder *MockSWNBus_EventBidirectClientMockRecorder
}

// MockSWNBus_EventBidirectClientMockRecorder is the mock recorder for MockSWNBus_EventBidirectClient.
type MockSWNBus_EventBidirectClientMockRecorder struct {
	mock *MockSWNBus_EventBidirectClient
}

// NewMockSWNBus_EventBidirectClient creates a new mock instance.
func NewMockSWNBus_EventBidirectClient(ctrl *gomock.Controller) *MockSWNBus_EventBidirectClient {
	mock := &MockSWNBus_EventBidirectClient{ctrl: ctrl}
	mock.recorder = &MockSWNBus_EventBidirectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSWNBus_EventBidirectClient) EXPECT() *MockSWNBus_EventBidirectClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSWNBus_EventBidirectClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSWNBus_EventBidirectClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSWNBus_EventBidirectClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSWNBus_EventBidirectClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSWNBus_EventBidirectClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSWNBus_EventBidirectClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSWNBus_EventBidirectClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSWNBus_EventBidirectClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSWNBus_EventBidirectClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSWNBus_EventBidirectClient) Recv() (*Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSWNBus_EventBidirectClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSWNBus_EventBidirectClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSWNBus_EventBidirectClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSWNBus_EventBidirectClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSWNBus_EventBidirectClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSWNBus_EventBidirectClient) Send(arg0 *Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSWNBus_EventBidirectClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSWNBus_EventBidirectClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSWNBus_EventBidirectClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSWNBus_EventBidirectClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSWNBus_EventBidirectClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSWNBus_EventBidirectClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSWNBus_EventBidirectClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSWNBus_EventBidirectClient)(nil).Trailer))
}

// MockSWNBus_LocalDistributeEventsClient is a mock of SWNBus_LocalDistributeEventsClient interface.
type MockSWNBus_LocalDistributeEventsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSWNBus_LocalDistributeEventsClientMockRecorder
}

// MockSWNBus_LocalDistributeEventsClientMockRecorder is the mock recorder for MockSWNBus_LocalDistributeEventsClient.
type MockSWNBus_LocalDistributeEventsClientMockRecorder struct {
	mock *MockSWNBus_LocalDistributeEventsClient
}

// NewMockSWNBus_LocalDistributeEventsClient creates a new mock instance.
func NewMockSWNBus_LocalDistributeEventsClient(ctrl *gomock.Controller) *MockSWNBus_LocalDistributeEventsClient {
	mock := &MockSWNBus_LocalDistributeEventsClient{ctrl: ctrl}
	mock.recorder = &MockSWNBus_LocalDistributeEventsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSWNBus_LocalDistributeEventsClient) EXPECT() *MockSWNBus_LocalDistributeEventsClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockSWNBus_LocalDistributeEventsClient) CloseAndRecv() (*StreamEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*StreamEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockSWNBus_LocalDistributeEventsClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockSWNBus_LocalDistributeEventsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSWNBus_LocalDistributeEventsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSWNBus_LocalDistributeEventsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSWNBus_LocalDistributeEventsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSWNBus_LocalDistributeEventsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSWNBus_LocalDistributeEventsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockSWNBus_LocalDistributeEventsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSWNBus_LocalDistributeEventsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSWNBus_LocalDistributeEventsClient) Send(arg0 *Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSWNBus_LocalDistributeEventsClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSWNBus_LocalDistributeEventsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSWNBus_LocalDistributeEventsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSWNBus_LocalDistributeEventsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSWNBus_LocalDistributeEventsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsClient)(nil).Trailer))
}

// MockSWNBus_LocalFunnelEventsClient is a mock of SWNBus_LocalFunnelEventsClient interface.
type MockSWNBus_LocalFunnelEventsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSWNBus_LocalFunnelEventsClientMockRecorder
}

// MockSWNBus_LocalFunnelEventsClientMockRecorder is the mock recorder for MockSWNBus_LocalFunnelEventsClient.
type MockSWNBus_LocalFunnelEventsClientMockRecorder struct {
	mock *MockSWNBus_LocalFunnelEventsClient
}

// NewMockSWNBus_LocalFunnelEventsClient creates a new mock instance.
func NewMockSWNBus_LocalFunnelEventsClient(ctrl *gomock.Controller) *MockSWNBus_LocalFunnelEventsClient {
	mock := &MockSWNBus_LocalFunnelEventsClient{ctrl: ctrl}
	mock.recorder = &MockSWNBus_LocalFunnelEventsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSWNBus_LocalFunnelEventsClient) EXPECT() *MockSWNBus_LocalFunnelEventsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSWNBus_LocalFunnelEventsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSWNBus_LocalFunnelEventsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSWNBus_LocalFunnelEventsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSWNBus_LocalFunnelEventsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSWNBus_LocalFunnelEventsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSWNBus_LocalFunnelEventsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSWNBus_LocalFunnelEventsClient) Recv() (*Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSWNBus_LocalFunnelEventsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSWNBus_LocalFunnelEventsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSWNBus_LocalFunnelEventsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockSWNBus_LocalFunnelEventsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSWNBus_LocalFunnelEventsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSWNBus_LocalFunnelEventsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSWNBus_LocalFunnelEventsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsClient)(nil).Trailer))
}

// MockSWNBusServer is a mock of SWNBusServer interface.
type MockSWNBusServer struct {
	ctrl     *gomock.Controller
	recorder *MockSWNBusServerMockRecorder
}

// MockSWNBusServerMockRecorder is the mock recorder for MockSWNBusServer.
type MockSWNBusServerMockRecorder struct {
	mock *MockSWNBusServer
}

// NewMockSWNBusServer creates a new mock instance.
func NewMockSWNBusServer(ctrl *gomock.Controller) *MockSWNBusServer {
	mock := &MockSWNBusServer{ctrl: ctrl}
	mock.recorder = &MockSWNBusServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSWNBusServer) EXPECT() *MockSWNBusServerMockRecorder {
	return m.recorder
}

// EventBidirect mocks base method.
func (m *MockSWNBusServer) EventBidirect(arg0 SWNBus_EventBidirectServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventBidirect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventBidirect indicates an expected call of EventBidirect.
func (mr *MockSWNBusServerMockRecorder) EventBidirect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventBidirect", reflect.TypeOf((*MockSWNBusServer)(nil).EventBidirect), arg0)
}

// GetPeerInfo mocks base method.
func (m *MockSWNBusServer) GetPeerInfo(arg0 context.Context, arg1 *empty.Empty) (*Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerInfo", arg0, arg1)
	ret0, _ := ret[0].(*Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerInfo indicates an expected call of GetPeerInfo.
func (mr *MockSWNBusServerMockRecorder) GetPeerInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerInfo", reflect.TypeOf((*MockSWNBusServer)(nil).GetPeerInfo), arg0, arg1)
}

// LocalDistributeEvents mocks base method.
func (m *MockSWNBusServer) LocalDistributeEvents(arg0 SWNBus_LocalDistributeEventsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalDistributeEvents", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LocalDistributeEvents indicates an expected call of LocalDistributeEvents.
func (mr *MockSWNBusServerMockRecorder) LocalDistributeEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalDistributeEvents", reflect.TypeOf((*MockSWNBusServer)(nil).LocalDistributeEvents), arg0)
}

// LocalFunnelEvents mocks base method.
func (m *MockSWNBusServer) LocalFunnelEvents(arg0 *ListenEventsRequest, arg1 SWNBus_LocalFunnelEventsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalFunnelEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LocalFunnelEvents indicates an expected call of LocalFunnelEvents.
func (mr *MockSWNBusServerMockRecorder) LocalFunnelEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalFunnelEvents", reflect.TypeOf((*MockSWNBusServer)(nil).LocalFunnelEvents), arg0, arg1)
}

// mustEmbedUnimplementedSWNBusServer mocks base method.
func (m *MockSWNBusServer) mustEmbedUnimplementedSWNBusServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSWNBusServer")
}

// mustEmbedUnimplementedSWNBusServer indicates an expected call of mustEmbedUnimplementedSWNBusServer.
func (mr *MockSWNBusServerMockRecorder) mustEmbedUnimplementedSWNBusServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSWNBusServer", reflect.TypeOf((*MockSWNBusServer)(nil).mustEmbedUnimplementedSWNBusServer))
}

// MockUnsafeSWNBusServer is a mock of UnsafeSWNBusServer interface.
type MockUnsafeSWNBusServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSWNBusServerMockRecorder
}

// MockUnsafeSWNBusServerMockRecorder is the mock recorder for MockUnsafeSWNBusServer.
type MockUnsafeSWNBusServerMockRecorder struct {
	mock *MockUnsafeSWNBusServer
}

// NewMockUnsafeSWNBusServer creates a new mock instance.
func NewMockUnsafeSWNBusServer(ctrl *gomock.Controller) *MockUnsafeSWNBusServer {
	mock := &MockUnsafeSWNBusServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSWNBusServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSWNBusServer) EXPECT() *MockUnsafeSWNBusServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSWNBusServer mocks base method.
func (m *MockUnsafeSWNBusServer) mustEmbedUnimplementedSWNBusServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSWNBusServer")
}

// mustEmbedUnimplementedSWNBusServer indicates an expected call of mustEmbedUnimplementedSWNBusServer.
func (mr *MockUnsafeSWNBusServerMockRecorder) mustEmbedUnimplementedSWNBusServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSWNBusServer", reflect.TypeOf((*MockUnsafeSWNBusServer)(nil).mustEmbedUnimplementedSWNBusServer))
}

// MockSWNBus_EventBidirectServer is a mock of SWNBus_EventBidirectServer interface.
type MockSWNBus_EventBidirectServer struct {
	ctrl     *gomock.Controller
	recorder *MockSWNBus_EventBidirectServerMockRecorder
}

// MockSWNBus_EventBidirectServerMockRecorder is the mock recorder for MockSWNBus_EventBidirectServer.
type MockSWNBus_EventBidirectServerMockRecorder struct {
	mock *MockSWNBus_EventBidirectServer
}

// NewMockSWNBus_EventBidirectServer creates a new mock instance.
func NewMockSWNBus_EventBidirectServer(ctrl *gomock.Controller) *MockSWNBus_EventBidirectServer {
	mock := &MockSWNBus_EventBidirectServer{ctrl: ctrl}
	mock.recorder = &MockSWNBus_EventBidirectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSWNBus_EventBidirectServer) EXPECT() *MockSWNBus_EventBidirectServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSWNBus_EventBidirectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSWNBus_EventBidirectServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSWNBus_EventBidirectServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockSWNBus_EventBidirectServer) Recv() (*Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSWNBus_EventBidirectServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSWNBus_EventBidirectServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSWNBus_EventBidirectServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSWNBus_EventBidirectServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSWNBus_EventBidirectServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSWNBus_EventBidirectServer) Send(arg0 *Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSWNBus_EventBidirectServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSWNBus_EventBidirectServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSWNBus_EventBidirectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSWNBus_EventBidirectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSWNBus_EventBidirectServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSWNBus_EventBidirectServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSWNBus_EventBidirectServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSWNBus_EventBidirectServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSWNBus_EventBidirectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSWNBus_EventBidirectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSWNBus_EventBidirectServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSWNBus_EventBidirectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSWNBus_EventBidirectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSWNBus_EventBidirectServer)(nil).SetTrailer), arg0)
}

// MockSWNBus_LocalDistributeEventsServer is a mock of SWNBus_LocalDistributeEventsServer interface.
type MockSWNBus_LocalDistributeEventsServer struct {
	ctrl     *gomock.Controller
	recorder *MockSWNBus_LocalDistributeEventsServerMockRecorder
}

// MockSWNBus_LocalDistributeEventsServerMockRecorder is the mock recorder for MockSWNBus_LocalDistributeEventsServer.
type MockSWNBus_LocalDistributeEventsServerMockRecorder struct {
	mock *MockSWNBus_LocalDistributeEventsServer
}

// NewMockSWNBus_LocalDistributeEventsServer creates a new mock instance.
func NewMockSWNBus_LocalDistributeEventsServer(ctrl *gomock.Controller) *MockSWNBus_LocalDistributeEventsServer {
	mock := &MockSWNBus_LocalDistributeEventsServer{ctrl: ctrl}
	mock.recorder = &MockSWNBus_LocalDistributeEventsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSWNBus_LocalDistributeEventsServer) EXPECT() *MockSWNBus_LocalDistributeEventsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSWNBus_LocalDistributeEventsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSWNBus_LocalDistributeEventsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockSWNBus_LocalDistributeEventsServer) Recv() (*Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSWNBus_LocalDistributeEventsServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSWNBus_LocalDistributeEventsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSWNBus_LocalDistributeEventsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockSWNBus_LocalDistributeEventsServer) SendAndClose(arg0 *StreamEventsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockSWNBus_LocalDistributeEventsServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockSWNBus_LocalDistributeEventsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSWNBus_LocalDistributeEventsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSWNBus_LocalDistributeEventsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSWNBus_LocalDistributeEventsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSWNBus_LocalDistributeEventsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSWNBus_LocalDistributeEventsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSWNBus_LocalDistributeEventsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSWNBus_LocalDistributeEventsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSWNBus_LocalDistributeEventsServer)(nil).SetTrailer), arg0)
}

// MockSWNBus_LocalFunnelEventsServer is a mock of SWNBus_LocalFunnelEventsServer interface.
type MockSWNBus_LocalFunnelEventsServer struct {
	ctrl     *gomock.Controller
	recorder *MockSWNBus_LocalFunnelEventsServerMockRecorder
}

// MockSWNBus_LocalFunnelEventsServerMockRecorder is the mock recorder for MockSWNBus_LocalFunnelEventsServer.
type MockSWNBus_LocalFunnelEventsServerMockRecorder struct {
	mock *MockSWNBus_LocalFunnelEventsServer
}

// NewMockSWNBus_LocalFunnelEventsServer creates a new mock instance.
func NewMockSWNBus_LocalFunnelEventsServer(ctrl *gomock.Controller) *MockSWNBus_LocalFunnelEventsServer {
	mock := &MockSWNBus_LocalFunnelEventsServer{ctrl: ctrl}
	mock.recorder = &MockSWNBus_LocalFunnelEventsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSWNBus_LocalFunnelEventsServer) EXPECT() *MockSWNBus_LocalFunnelEventsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSWNBus_LocalFunnelEventsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSWNBus_LocalFunnelEventsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockSWNBus_LocalFunnelEventsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSWNBus_LocalFunnelEventsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSWNBus_LocalFunnelEventsServer) Send(arg0 *Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSWNBus_LocalFunnelEventsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSWNBus_LocalFunnelEventsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSWNBus_LocalFunnelEventsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSWNBus_LocalFunnelEventsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSWNBus_LocalFunnelEventsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSWNBus_LocalFunnelEventsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSWNBus_LocalFunnelEventsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSWNBus_LocalFunnelEventsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSWNBus_LocalFunnelEventsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSWNBus_LocalFunnelEventsServer)(nil).SetTrailer), arg0)
}
