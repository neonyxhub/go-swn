syntax = "proto3";
package bus_api;
option go_package = "go.neonyx.io/go-swn/pkg/bus/pb";

import "google/protobuf/empty.proto";

service SWNBus {
	// placeholder for bidirectional streaming events and receiving events
	rpc EventBidirect(stream Event) returns (stream Event) {};
	// swn here is the server, which listens to events from cwn
	rpc LocalDistributeEvents(stream Event) returns (StreamEventsResponse) {};
	// swn here is the server, which gives events to cwn
	rpc LocalFunnelEvents(ListenEventsRequest) returns (stream Event) {};
	// returns local swn's peer information
	rpc GetPeerInfo(google.protobuf.Empty) returns (Peer) {};
}

enum EventType {
	REQ = 0;
	RESP = 1;
	ERR = 2;
}

message Event {
	// google UUIDv4
	string id = 1;
	// event type to distinguish receiver's behaviour upon req, resp and err
	EventType type = 2;
	// destination multiaddress of remote peer
	bytes dest = 3;
	// event model data lexicon to distinguish model data for receiver
	string lexicon_uri = 4;
	// event serialized model data
	bytes data = 5;
	// authentication (jwt, oauth etc.)
	bytes auth = 6;
	// event created unix timestamp (milliseconds suggested)
	int64 created_ts = 7;
}

message Peer {
	bytes id = 1;
}

// could be implemented in future

message ListenEventsRequest {}
message StreamEventsResponse {}